generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  handle       String   @id @default(uuid()) @db.Uuid
  name         String   @db.Text
  surname      String   @db.Text
  email        String   @db.Text
  password     String   @db.Text
  phone        String?  @db.VarChar(10)
  creationDate DateTime @default(now()) @db.Date
  image        String   @db.Text
  rating       Int      @default(0) @db.SmallInt

  //! relation field
  rfEventsCreated events[]  @relation("CreatorUserHandle")
  rfRequestJoin   requests[] @relation("JoinRequest")
  rfChatFirstUser chats[] @relation("rfHFirstUser")
  rfChatSecondtUser chats[] @relation("rfHSecondUser")
  rfMessage messages[] @relation("rfMessageUserHandle")
}

model categories {
  name  String @id @db.Text
  color String @db.VarChar(7)

  //! relation field
  rfEvents events[] @relation("Category")
}

model events {
  id                String   @id  @db.Uuid@default(uuid())
  title             String   @db.Text
  description       String   @db.Text
  date              DateTime
  duration          Int
  phone             String   @db.VarChar(10)
  latitude          String   @db.Text
  longitude         String   @db.Text
  creatorUserHandle String   @db.Uuid
  category          String   @db.Text

  //! relation field
  rfCreatorUserHandle users      @relation("CreatorUserHandle", fields: [creatorUserHandle], references: [handle])
  rfCategory          categories @relation("Category", fields: [category], references: [name])
  rfRequest           requests[]  @relation("rfEventId")
}

model requests {
  id         String   @id @default(uuid()) @db.Uuid
  userHandle String   @db.Uuid
  eventId    String   @db.Uuid
  accepted   Boolean?
  date       DateTime

  //! relation field
  rfUserHandle users  @relation("JoinRequest", fields: [userHandle], references: [handle])
  rfEventId    events @relation("rfEventId", fields: [eventId], references: [id])
}

model chats {
  id String @id @db.Uuid @default(uuid())
  handleFirstUser String @db.Uuid
  handleSecondtUser String @db.Uuid

  //! relation field
  rfHFirstUser users @relation("rfHFirstUser", fields: [handleFirstUser], references: [handle])
  rfHSecondUser users @relation("rfHSecondUser", fields: [handleSecondtUser], references: [handle])
  rfChatMessages messages[] @relation("rfChatId")
}

model groups {
  id String @db.Uuid @id @default(uuid())
  name String @db.Text
  description String @db.Text
  image String @db.Text @default("https://google.it")

  //! relational field
  rfGroupMessages messages[] @relation("rfGroupid")
}

model messages {
  id String @id @db.Uuid @default(uuid())
  userHandle String @db.Uuid
  chatId String? @db.Uuid
  groupId String? @db.Uuid
  text String @db.Text
  date DateTime

  //! relational field
  rfUserHandle users @relation("rfMessageUserHandle", fields: [userHandle], references: [handle])
  rfChatId chats? @relation("rfChatId", fields: [chatId], references: [id])
  rfGroupId groups? @relation("rfGroupid", fields: [groupId], references: [id])
}